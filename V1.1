from playsound import playsound
import random
import turtle
import datetime
import time
datetime.datetime.now()

print "Yo yo yo, what's up home slice! I'm Ziri, your virtual assistant. Type what you want me to do. To see the list of skillz, type help."
# UNFINISHEDplaysound("")

x = raw_input("Type what you want me to do here. ")

if str(x) == "time":
    print datetime.datetime.now().time()

if str(x) == "date":
    print datetime.datetime.now().date()

elif str(x) == "fortune":
    from random import *
    f = randint(1, 20)
    y = raw_input("Ask a question and I will try to answer it. ")
    
    if f == 1:
        print "It is certain."
        
    if f == 2:
        print "It is decidedly so."
    
    if f == 3:
        print "Without a doubt."
    
    if f == 4:
        print "Yes - definitely."
    
    if f == 5:
        print "You may rely on it."
    
    if f == 6:
        print "As I see it, yes."
    
    if f == 7:
        print "Most likely."
    
    if f == 8:
        print "Outlook good."
    
    if f == 9:
        print "Yes."
    
    if f == 10:
        print "Signs point to yes."
    
    if f == 11:
        print "Reply hazy, try again."
    
    if f == 12:
        print "Ask again later."
    
    if f == 13:
        print "Better not tell you now."
    
    if f == 14:
        print "Cannot predict now."
    
    if f == 15:
        print "Concentrate and ask again."
    
    if f == 16:
        print "Don't count on it."
    
    if f == 17:
        print  "My reply is no."
    
    if f == 18:
        print "My sources say no."
    
    if f == 19:
        print "Outlook not so good."
    
    if f == 20:
        print "Very doubtful."

elif str(x) == "repeater":
    print "Hello!"
    n = 100
    r = raw_input("What do you want me to repeat 100 times? ")
    
    print "Here you go:"
    
    while n != 0:
        print str(r)
        n = n - 1

elif str(x) == "snake":
    #source: https://stackoverflow.com/questions/30050194/snake-game-in-python-using-turtle-graphics
    score = 0 #not an original part of the code, I added this so Ziri could tell you what score you got but it doesn't work because the original writer didn't add collision detection
    class Square:
        def __init__(self, x, y):
            self.x = x
            self.y = y

        def drawself(self, turtle):
            # draw a black box at its coordinates, leaving a small gap between cubes
            turtle.goto(self.x - 9, self.y - 9)
            turtle.begin_fill()
            for i in range(4):
                turtle.forward(18)
                turtle.left(90)
            turtle.end_fill()


    class Food:
        def __init__(self, x, y):
            self.x = x
            self.y = y
            self.state = "ON"

        def changelocation(self):
            # I haven't programmed it to spawn outside the snake's body yet
            self.x = random.randint(0, 20)*20 - 200
            self.y = random.randint(0, 20)*20 - 200

        def drawself(self, turtle):
            # similar to the Square drawself, but blinks on and off
            if self.state == "ON":
                turtle.goto(self.x - 9, self.y - 9)
                turtle.begin_fill()
                for i in range(4):
                    turtle.forward(18)
                    turtle.left(90)
                turtle.end_fill()

        def changestate(self):
            # controls the blinking
            self.state = "OFF" if self.state == "ON" else "ON"


    class Snake:
        def __init__(self):
            self.headposition = [20, 0] # keeps track of where it needs to go next
            self.body = [Square(-20, 0), Square(0, 0), Square(20, 0)] # body is a list of squares
            self.nextX = 1 # tells the snake which way it's going next
            self.nextY = 0
            self.crashed = False # I'll use this when I get around to collision detection
            self.nextposition = [self.headposition[0] + 20*self.nextX,
                                 self.headposition[1] + 20*self.nextY]
            # prepares the next location to add to the snake

        def moveOneStep(self):
            if Square(self.nextposition[0], self.nextposition[1]) not in self.body: 
                # attempt (unsuccessful) at collision detection
                self.body.append(Square(self.nextposition[0], self.nextposition[1])) 
                # moves the snake head to the next spot, deleting the tail
                del self.body[0]
                self.headposition[0], self.headposition[1] = self.body[-1].x, self.body[-1].y 
            # resets the head and nextposition
                self.nextposition = [self.headposition[0] + 20*self.nextX,
                                     self.headposition[1] + 20*self.nextY]
            else:
                self.crashed = True # more unsuccessful collision detection

        def moveup(self): # pretty obvious what these do
            self.nextX = 0
            self.nextY = 1

        def moveleft(self):
            self.nextX = -1
            self.nextY = 0

        def moveright(self):
            self.nextX = 1
            self.nextY = 0

        def movedown(self):
            self.nextX = 0
            self.nextY = -1

        def eatFood(self):
            # adds the next spot without deleting the tail, extending the snake by 1
            self.body.append(Square(self.nextposition[0], self.nextposition[1]))
            self.headposition[0], self.headposition[1] = self.body[-1].x, self.body[-1].y
            self.nextposition = [self.headposition[0] + 20*self.nextX,
                                 self.headposition[1] + 20*self.nextY]
            global score
            score = score + 1

        def drawself(self, turtle): # draws the whole snake when called
            for segment in self.body:
                segment.drawself(turtle)


    class Game:
        def __init__(self):
            # game object has a screen, a turtle, a basic snake and a food
            self.screen = turtle.Screen()
            self.artist = turtle.Turtle()
            self.artist.up()
            self.artist.hideturtle()
            self.snake = Snake()
            self.food = Food(100, 0)
            self.counter = 0 # this will be used later
            self.commandpending = False # as will this

        def nextFrame(self):
            while True: # now here's where it gets fiddly...
                game.screen.listen()
                game.screen.onkey(game.snakedown, "Down")
                game.screen.onkey(game.snakeup, "Up")
                game.screen.onkey(game.snakeleft, "Left")
                game.screen.onkey(game.snakeright, "Right")
                turtle.tracer(0) # follow it so far?
                self.artist.clear()
                if self.counter == 5: 
                # only moves to next frame every 5 loops, this was an attempt to get rid of the turning delay
                    if (self.snake.nextposition[0], self.snake.nextposition[1]) == (self.food.x, self.food.y):
                        self.snake.eatFood()
                        self.food.changelocation()
                    else:
                        self.snake.moveOneStep()
                    self.counter = 0
                else:
                    self.counter += 1
                self.food.changestate() # makes the food flash
                self.food.drawself(self.artist) # show the food and snake
                self.snake.drawself(self.artist)
                turtle.update()
                self.commandpending = False
                time.sleep(0.05)

        def snakeup(self):
            print("going up") # put this in for debugging purposes
            if not self.commandpending: 
            # should allow only one turn each frame; I don't think it's working
                self.snake.moveup()
                self.commandpending = True

        def snakedown(self):
            print("going down")
            if not self.commandpending:
                self.snake.movedown()
                self.commandpending = True

        def snakeleft(self):
            print("going left")
            if not self.commandpending:
                self.snake.moveleft()
                self.commandpending = True

        def snakeright(self):
            print("going right")
            if not self.commandpending:
                self.snake.moveright()
                self.commandpending = True


    game = Game()
    game.nextFrame()
    print("Game over!")
    print("Your score was " + score + ". Good job!") #unfortunately this didn't work ;(

    game.screen.mainloop()

if str(x) == "die":
    print("Ok. Goodbye, cruel world!")

elif str(x) == "help":
    print 'If you want me to give you the time, type "time". If you want me to give you the date, type "date". If you want me to give you your fortune, type "fortune". If you want me to repeat something 100 times, type "repeater". If you want to play snake, type "snake". If you want me to die, type "die".'


